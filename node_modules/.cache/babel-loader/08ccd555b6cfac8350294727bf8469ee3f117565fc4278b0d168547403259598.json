{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Get backend URL from environment variable\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: BACKEND_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const usePerformanceAPI = () => {\n  _s();\n  const [connectionStatus, setConnectionStatus] = useState('checking');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Check backend connection on mount\n  useEffect(() => {\n    checkConnection();\n  }, []);\n  const checkConnection = async () => {\n    try {\n      setConnectionStatus('checking');\n      const response = await api.get('/health');\n      if (response.data.status === 'healthy') {\n        setConnectionStatus('connected');\n      } else {\n        setConnectionStatus('error');\n      }\n    } catch (err) {\n      console.error('Backend connection failed:', err);\n      setConnectionStatus('disconnected');\n    }\n  };\n  const startTest = async testConfig => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await api.post('/test/start', testConfig);\n      return response.data;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || err.message || 'Failed to start test';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getTestStatus = async testId => {\n    try {\n      const response = await api.get(`/test/${testId}/status`);\n      return response.data;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || err.message || 'Failed to get test status';\n      throw new Error(errorMessage);\n    }\n  };\n  const analyzeResults = async testData => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await api.post('/analyze', testData);\n      return response.data;\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      const errorMessage = ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.error) || err.message || 'Failed to analyze results';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const analyzeResultsWithImage = async (testData, imageUrl) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await api.post('/analyze/image', {\n        test_data: testData,\n        image_url: imageUrl\n      });\n      return response.data;\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      const errorMessage = ((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.error) || err.message || 'Failed to analyze results with image';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const listTests = async () => {\n    try {\n      const response = await api.get('/tests');\n      return response.data;\n    } catch (err) {\n      var _err$response5, _err$response5$data;\n      const errorMessage = ((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : (_err$response5$data = _err$response5.data) === null || _err$response5$data === void 0 ? void 0 : _err$response5$data.error) || err.message || 'Failed to list tests';\n      throw new Error(errorMessage);\n    }\n  };\n  const getTestHistory = async () => {\n    try {\n      const response = await api.get('/tests/history');\n      return response.data;\n    } catch (err) {\n      var _err$response6, _err$response6$data;\n      const errorMessage = ((_err$response6 = err.response) === null || _err$response6 === void 0 ? void 0 : (_err$response6$data = _err$response6.data) === null || _err$response6$data === void 0 ? void 0 : _err$response6$data.error) || err.message || 'Failed to get test history';\n      throw new Error(errorMessage);\n    }\n  };\n  const getAgentMemory = async () => {\n    try {\n      const response = await api.get('/agent/memory');\n      return response.data;\n    } catch (err) {\n      var _err$response7, _err$response7$data;\n      const errorMessage = ((_err$response7 = err.response) === null || _err$response7 === void 0 ? void 0 : (_err$response7$data = _err$response7.data) === null || _err$response7$data === void 0 ? void 0 : _err$response7$data.error) || err.message || 'Failed to get agent memory';\n      throw new Error(errorMessage);\n    }\n  };\n  const getAgentStatus = async () => {\n    try {\n      const response = await api.get('/agent/status');\n      return response.data;\n    } catch (err) {\n      var _err$response8, _err$response8$data;\n      const errorMessage = ((_err$response8 = err.response) === null || _err$response8 === void 0 ? void 0 : (_err$response8$data = _err$response8.data) === null || _err$response8$data === void 0 ? void 0 : _err$response8$data.error) || err.message || 'Failed to get agent status';\n      throw new Error(errorMessage);\n    }\n  };\n  return {\n    // API functions\n    startTest,\n    getTestStatus,\n    analyzeResults,\n    analyzeResultsWithImage,\n    listTests,\n    getTestHistory,\n    getAgentMemory,\n    getAgentStatus,\n    // State\n    connectionStatus,\n    loading,\n    error,\n    // Utilities\n    checkConnection,\n    backendUrl: BACKEND_URL\n  };\n};\n_s(usePerformanceAPI, \"Cpjd+nle9ann2+Gr90258QrMa/4=\");","map":{"version":3,"names":["useState","useEffect","axios","BACKEND_URL","process","env","REACT_APP_BACKEND_URL","api","create","baseURL","timeout","headers","usePerformanceAPI","_s","connectionStatus","setConnectionStatus","loading","setLoading","error","setError","checkConnection","response","get","data","status","err","console","startTest","testConfig","post","_err$response","_err$response$data","errorMessage","message","Error","getTestStatus","testId","_err$response2","_err$response2$data","analyzeResults","testData","_err$response3","_err$response3$data","analyzeResultsWithImage","imageUrl","test_data","image_url","_err$response4","_err$response4$data","listTests","_err$response5","_err$response5$data","getTestHistory","_err$response6","_err$response6$data","getAgentMemory","_err$response7","_err$response7$data","getAgentStatus","_err$response8","_err$response8$data","backendUrl"],"sources":["C:/Users/Sneha/Downloads/LUDO/frontend/src/hooks/usePerformanceAPI.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Get backend URL from environment variable\r\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000';\r\n\r\n// Create axios instance with base configuration\r\nconst api = axios.create({\r\n  baseURL: BACKEND_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\nexport const usePerformanceAPI = () => {\r\n  const [connectionStatus, setConnectionStatus] = useState('checking');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Check backend connection on mount\r\n  useEffect(() => {\r\n    checkConnection();\r\n  }, []);\r\n\r\n  const checkConnection = async () => {\r\n    try {\r\n      setConnectionStatus('checking');\r\n      const response = await api.get('/health');\r\n      if (response.data.status === 'healthy') {\r\n        setConnectionStatus('connected');\r\n      } else {\r\n        setConnectionStatus('error');\r\n      }\r\n    } catch (err) {\r\n      console.error('Backend connection failed:', err);\r\n      setConnectionStatus('disconnected');\r\n    }\r\n  };\r\n\r\n  const startTest = async (testConfig) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await api.post('/test/start', testConfig);\r\n      return response.data;\r\n    } catch (err) {\r\n      const errorMessage = err.response?.data?.error || err.message || 'Failed to start test';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getTestStatus = async (testId) => {\r\n    try {\r\n      const response = await api.get(`/test/${testId}/status`);\r\n      return response.data;\r\n    } catch (err) {\r\n      const errorMessage = err.response?.data?.error || err.message || 'Failed to get test status';\r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  const analyzeResults = async (testData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await api.post('/analyze', testData);\r\n      return response.data;\r\n    } catch (err) {\r\n      const errorMessage = err.response?.data?.error || err.message || 'Failed to analyze results';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const analyzeResultsWithImage = async (testData, imageUrl) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await api.post('/analyze/image', {\r\n        test_data: testData,\r\n        image_url: imageUrl\r\n      });\r\n      return response.data;\r\n    } catch (err) {\r\n      const errorMessage = err.response?.data?.error || err.message || 'Failed to analyze results with image';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const listTests = async () => {\r\n    try {\r\n      const response = await api.get('/tests');\r\n      return response.data;\r\n    } catch (err) {\r\n      const errorMessage = err.response?.data?.error || err.message || 'Failed to list tests';\r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  const getTestHistory = async () => {\r\n    try {\r\n      const response = await api.get('/tests/history');\r\n      return response.data;\r\n    } catch (err) {\r\n      const errorMessage = err.response?.data?.error || err.message || 'Failed to get test history';\r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  const getAgentMemory = async () => {\r\n    try {\r\n      const response = await api.get('/agent/memory');\r\n      return response.data;\r\n    } catch (err) {\r\n      const errorMessage = err.response?.data?.error || err.message || 'Failed to get agent memory';\r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  const getAgentStatus = async () => {\r\n    try {\r\n      const response = await api.get('/agent/status');\r\n      return response.data;\r\n    } catch (err) {\r\n      const errorMessage = err.response?.data?.error || err.message || 'Failed to get agent status';\r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  return {\r\n    // API functions\r\n    startTest,\r\n    getTestStatus,\r\n    analyzeResults,\r\n    analyzeResultsWithImage,\r\n    listTests,\r\n    getTestHistory,\r\n    getAgentMemory,\r\n    getAgentStatus,\r\n    \r\n    // State\r\n    connectionStatus,\r\n    loading,\r\n    error,\r\n    \r\n    // Utilities\r\n    checkConnection,\r\n    backendUrl: BACKEND_URL,\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}