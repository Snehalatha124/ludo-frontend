{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sneha\\\\Downloads\\\\LUDO\\\\frontend\\\\src\\\\context\\\\TestContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestContext = /*#__PURE__*/createContext();\nexport const useTestContext = () => {\n  _s();\n  const context = useContext(TestContext);\n  if (!context) {\n    throw new Error('useTestContext must be used within a TestProvider');\n  }\n  return context;\n};\n_s(useTestContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const TestProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentTest, setCurrentTest] = useState(null);\n  const [testResults, setTestResults] = useState({\n    totalRequests: 0,\n    successfulRequests: 0,\n    failedRequests: 0,\n    avgResponseTime: 0,\n    percentile95: 0,\n    peakRPS: 0,\n    userCount: 0\n  });\n  const [realTimeData, setRealTimeData] = useState({\n    activeUsers: 0,\n    avgResponseTime: 0,\n    successRate: 0,\n    requestsPerSecond: 0,\n    testProgress: 0\n  });\n  const [isTestRunning, setIsTestRunning] = useState(false);\n  const [testHistory, setTestHistory] = useState([]);\n  const [testData, setTestData] = useState({\n    labels: [],\n    responseTimes: [],\n    requestsPerSecond: [],\n    successRate: []\n  });\n\n  // Update real-time data\n  const updateRealTimeData = data => {\n    setRealTimeData(data);\n  };\n\n  // Update test results\n  const updateTestResults = results => {\n    setTestResults(results);\n  };\n\n  // Start test\n  const startTest = testConfig => {\n    setCurrentTest(testConfig);\n    setIsTestRunning(true);\n    setTestResults({\n      totalRequests: 0,\n      successfulRequests: 0,\n      failedRequests: 0,\n      avgResponseTime: 0,\n      percentile95: 0,\n      peakRPS: 0,\n      userCount: testConfig.userCount\n    });\n    setRealTimeData({\n      activeUsers: 0,\n      avgResponseTime: 0,\n      successRate: 0,\n      requestsPerSecond: 0,\n      testProgress: 0\n    });\n    setTestData({\n      labels: [],\n      responseTimes: [],\n      requestsPerSecond: [],\n      successRate: []\n    });\n  };\n\n  // Stop test\n  const stopTest = () => {\n    setIsTestRunning(false);\n    setCurrentTest(null);\n  };\n\n  // Add test to history\n  const addTestToHistory = testData => {\n    setTestHistory(prev => [testData, ...prev.slice(0, 9)]); // Keep last 10 tests\n  };\n\n  // Remove test from history\n  const removeTestFromHistory = index => {\n    setTestHistory(prev => prev.filter((_, i) => i !== index));\n  };\n\n  // Update test data for charts\n  const updateTestData = data => {\n    setTestData(data);\n  };\n  const value = {\n    currentTest,\n    testResults,\n    realTimeData,\n    isTestRunning,\n    testHistory,\n    testData,\n    updateRealTimeData,\n    updateTestResults,\n    startTest,\n    stopTest,\n    addTestToHistory,\n    removeTestFromHistory,\n    updateTestData\n  };\n  return /*#__PURE__*/_jsxDEV(TestContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s2(TestProvider, \"MYtwGFQsszbhWKCL0iXxpfCEh4E=\");\n_c = TestProvider;\nvar _c;\n$RefreshReg$(_c, \"TestProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","TestContext","useTestContext","_s","context","Error","TestProvider","children","_s2","currentTest","setCurrentTest","testResults","setTestResults","totalRequests","successfulRequests","failedRequests","avgResponseTime","percentile95","peakRPS","userCount","realTimeData","setRealTimeData","activeUsers","successRate","requestsPerSecond","testProgress","isTestRunning","setIsTestRunning","testHistory","setTestHistory","testData","setTestData","labels","responseTimes","updateRealTimeData","data","updateTestResults","results","startTest","testConfig","stopTest","addTestToHistory","prev","slice","removeTestFromHistory","index","filter","_","i","updateTestData","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Sneha/Downloads/LUDO/frontend/src/context/TestContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst TestContext = createContext();\r\n\r\nexport const useTestContext = () => {\r\n  const context = useContext(TestContext);\r\n  if (!context) {\r\n    throw new Error('useTestContext must be used within a TestProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const TestProvider = ({ children }) => {\r\n  const [currentTest, setCurrentTest] = useState(null);\r\n  const [testResults, setTestResults] = useState({\r\n    totalRequests: 0,\r\n    successfulRequests: 0,\r\n    failedRequests: 0,\r\n    avgResponseTime: 0,\r\n    percentile95: 0,\r\n    peakRPS: 0,\r\n    userCount: 0\r\n  });\r\n  const [realTimeData, setRealTimeData] = useState({\r\n    activeUsers: 0,\r\n    avgResponseTime: 0,\r\n    successRate: 0,\r\n    requestsPerSecond: 0,\r\n    testProgress: 0\r\n  });\r\n  const [isTestRunning, setIsTestRunning] = useState(false);\r\n  const [testHistory, setTestHistory] = useState([]);\r\n  const [testData, setTestData] = useState({\r\n    labels: [],\r\n    responseTimes: [],\r\n    requestsPerSecond: [],\r\n    successRate: []\r\n  });\r\n\r\n  // Update real-time data\r\n  const updateRealTimeData = (data) => {\r\n    setRealTimeData(data);\r\n  };\r\n\r\n  // Update test results\r\n  const updateTestResults = (results) => {\r\n    setTestResults(results);\r\n  };\r\n\r\n  // Start test\r\n  const startTest = (testConfig) => {\r\n    setCurrentTest(testConfig);\r\n    setIsTestRunning(true);\r\n    setTestResults({\r\n      totalRequests: 0,\r\n      successfulRequests: 0,\r\n      failedRequests: 0,\r\n      avgResponseTime: 0,\r\n      percentile95: 0,\r\n      peakRPS: 0,\r\n      userCount: testConfig.userCount\r\n    });\r\n    setRealTimeData({\r\n      activeUsers: 0,\r\n      avgResponseTime: 0,\r\n      successRate: 0,\r\n      requestsPerSecond: 0,\r\n      testProgress: 0\r\n    });\r\n    setTestData({\r\n      labels: [],\r\n      responseTimes: [],\r\n      requestsPerSecond: [],\r\n      successRate: []\r\n    });\r\n  };\r\n\r\n  // Stop test\r\n  const stopTest = () => {\r\n    setIsTestRunning(false);\r\n    setCurrentTest(null);\r\n  };\r\n\r\n           // Add test to history\r\n         const addTestToHistory = (testData) => {\r\n           setTestHistory(prev => [testData, ...prev.slice(0, 9)]); // Keep last 10 tests\r\n         };\r\n\r\n         // Remove test from history\r\n         const removeTestFromHistory = (index) => {\r\n           setTestHistory(prev => prev.filter((_, i) => i !== index));\r\n         };\r\n\r\n  // Update test data for charts\r\n  const updateTestData = (data) => {\r\n    setTestData(data);\r\n  };\r\n\r\n  const value = {\r\n    currentTest,\r\n    testResults,\r\n    realTimeData,\r\n    isTestRunning,\r\n    testHistory,\r\n    testData,\r\n    updateRealTimeData,\r\n    updateTestResults,\r\n    startTest,\r\n    stopTest,\r\n    addTestToHistory,\r\n    removeTestFromHistory,\r\n    updateTestData\r\n  };\r\n\r\n  return (\r\n    <TestContext.Provider value={value}>\r\n      {children}\r\n    </TestContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}